/* readme */
/* Author: Stephen Polcyn, USACO */

Transformations
A square pattern of size N x N (1 <= N <= 10) black and white square tiles is transformed into another square pattern. Write a program that will recognize the minimum transformation that has been applied to the original pattern given the following list of possible transformations:

#1: 90 Degree Rotation: The pattern was rotated clockwise 90 degrees.
#2: 180 Degree Rotation: The pattern was rotated clockwise 180 degrees.
#3: 270 Degree Rotation: The pattern was rotated clockwise 270 degrees.
#4: Reflection: The pattern was reflected horizontally (turned into a mirror image of itself by reflecting around a vertical line in the middle of the image).
#5: Combination: The pattern was reflected horizontally and then subjected to one of the rotations (#1-#3).
#6: No Change: The original pattern was not changed.
#7: Invalid Transformation: The new pattern was not obtained by any of the above methods.
In the case that more than one transform could have been used, choose the one with the minimum number above.

PROGRAM NAME: transform

INPUT FORMAT

Line 1:    A single integer, N
Line 2..N+1:    N lines of N characters (each either `@' or `-'); this is the square before transformation
Line N+2..2*N+1:    N lines of N characters (each either `@' or `-'); this is the square after transformation
SAMPLE INPUT (file transform.in)

3
@-@
---
@@-
@-@
@--
--@
OUTPUT FORMAT

A single line containing the number from 1 through 7 (described above) that categorizes the transformation required to change from the `before' representation to the `after' representation.
SAMPLE OUTPUT (file transform.out)

1

General Idea:

Look at 1, 2, 3, 4, 5, 6, then declare invalid otherwise. 
Check no_change first. 
Design Decisions: Create square objects and manipulate, then compare vs. just sending an object to a method to check if that was the transformation. 
Or perhaps just do a different way of accessing the underlying data instead of creating entirely new objects?

Memory leak detected -- also look into smart pointers: https://stackoverflow.com/questions/569775/smart-pointers-boost-explained

Read about move semantics: https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html

An lvalue: Expression whose address can be taken.
An rvalue: Expression with a temporary value.
Move function: redirects a pointer in one object to another, then sets the pointer in the temp object to NULL so when the temp object goes out of scope the destructor doesn't destruct the memory that the pointer previously pointed to (and which our non-temporary object now has a reference to).

It seems that in the article ArrayWrapper(ArrayWrapper&& other) : _p_vals(other._p_vals), _metadata(other._metadata) auto-calls the move constructor for _metadata? This must be investigated.

So that syntax is an "initialization list" (https://www.cprogramming.com/tutorial/initialization-lists-c++.html). It can pass arguments to constructors of parent classes or of fields of an object. Also to note is that since const members can only be initialized once, it must be in an initialization list (otherwise, it'll already have been initialized by the time the constructor body starts running). Also needed when there is no default constructor or if a field is a reference.

New question: Why are references immutable? 
Properties of references:
1) Reference can only reference one object for their lifetime
2) References cannot be NULL
3) References must be initialized when declared
(per: https://www.geeksforgeeks.org/references-in-c/)

So the reason they're immutable is because they can only be initialized when declared, and can only reference one object for their lifetime, so as a result the object it references at the beginning is the object it references for its lifetime.

Possible the error is when destructing temp at the end of "recognize transformations", but not sure what's up.

May need to write a move constructor -- for now, trying to pinpoint what's happening as these functions are being called and returning in terms of construction, copying, moving, destruction.

Copy constructor not being called because it's the copy assignment operator that's being called: read this reference page: https://en.cppreference.com/w/cpp/language/copy_assignment
- Implicit copy assignment operator deleted if user-declared move constructor or user-declared move assignment operator 
- Looks like I can use the copy-and-swap idiom for my copy assignment operator because the argument is a local variable, (but wouldn't that mean I couldn't use the local variable with the same variables afterwards?)
- So, in essence, the advantage of the copy-and-swap idiom is that you can re-use the copy constructor code in the copy assignment operator, which is nice. The parameter is passed in by value (trigger copy constructor), and then you just swap the values and are done, no need to re-write copy constructor code.

I've been in Java too long -- a constructor is Class var(args), not Class var = new Class(args); or Class var = Class(args);
- the second one does copy-initialization, and a temporary object is created. Note: the assignment operator is never called. (discussion: https://stackoverflow.com/questions/587070/c-constructor-syntax)

Good valgrind resource: https://stackoverflow.com/questions/5134891/how-do-i-use-valgrind-to-find-memory-leaks
